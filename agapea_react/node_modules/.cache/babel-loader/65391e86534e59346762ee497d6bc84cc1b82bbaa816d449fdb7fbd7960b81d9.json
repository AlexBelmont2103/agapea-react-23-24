{"ast":null,"code":"//modulo donde exporto funciones javascript para hacer peticiones ajax al servicio RESTFULL montado sobre NODEJS\n\n//#region --- FUNCIONES DE REGISTRO DE CLIENTE ---  //\nexport function registrarCliente({\n  nombre,\n  apellidos,\n  email,\n  password,\n  login,\n  telefono\n}) {\n  if (login === \"\") login = email;\n\n  //envolvemos pet.ajax en un objeto PROMISE....\n  //en el prototipo, el argumento pasado es una funcion con dos parametros:\n  // - resolve:  una funcion q va a devolver los datos de la promesia si se ejecuta de forma correcta\n  //              es lo q se recoje en el .then()\n  // - reject:  una funcion q va a devolver los datos cuando quieres q la promesa se ejecute de forma\n  //          incorrecta, estos datos los recogeria el catch()\n\n  var _promiseResult = new Promise((resolve, reject) => {\n    var petAjax = new XMLHttpRequest();\n    petAjax.open(\"POST\", \"http://localhost:5000/api/Cliente/Registro\");\n    petAjax.setRequestHeader(\"Content-Type\", \"application/json\");\n    petAjax.addEventListener(\"readystatechange\", () => {\n      if (petAjax.readyState === 4) {\n        console.log(petAjax);\n        switch (petAjax.status) {\n          case 200:\n            //la respuesta del server esta en petAjax.responseText\n            var respuesta = JSON.parse(petAjax.responseText);\n            resolve(respuesta);\n            break;\n          default:\n            reject({\n              codigo: 1,\n              mensaje: \"algo ha ido mal en pet.ajax al servicio de registrar cliente...\"\n            });\n            break;\n        }\n      }\n    });\n    petAjax.send(JSON.stringify({\n      nombre,\n      apellidos,\n      login,\n      telefono,\n      email,\n      password\n    }));\n  });\n  return _promiseResult;\n}\n//#endregion\n\n//#region --- FUNCIONES DE LOGIN DE CLIENTE ---  //\nexport async function loginCliente(datoslogin) {\n  try {\n    var _petAjax = await fetch(\"http://localhost:5000/api/Cliente/Login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(datoslogin)\n    });\n    return await _petAjax.json();\n  } catch (error) {\n    console.log('error al hacer el login', error);\n  }\n}\n//#endregion","map":{"version":3,"names":["registrarCliente","nombre","apellidos","email","password","login","telefono","_promiseResult","Promise","resolve","reject","petAjax","XMLHttpRequest","open","setRequestHeader","addEventListener","readyState","console","log","status","respuesta","JSON","parse","responseText","codigo","mensaje","send","stringify","loginCliente","datoslogin","_petAjax","fetch","method","headers","body","json","error"],"sources":["C:/Users/thard/OneDrive/Documentos/DAW/Segundo/entornoCliente/agapea_react/src/servicios/restCliente.js"],"sourcesContent":["//modulo donde exporto funciones javascript para hacer peticiones ajax al servicio RESTFULL montado sobre NODEJS\r\n\r\n//#region --- FUNCIONES DE REGISTRO DE CLIENTE ---  //\r\nexport function registrarCliente({\r\n  nombre,\r\n  apellidos,\r\n  email,\r\n  password,\r\n  login,\r\n  telefono,\r\n}) {\r\n  if (login === \"\") login = email;\r\n\r\n  //envolvemos pet.ajax en un objeto PROMISE....\r\n  //en el prototipo, el argumento pasado es una funcion con dos parametros:\r\n  // - resolve:  una funcion q va a devolver los datos de la promesia si se ejecuta de forma correcta\r\n  //              es lo q se recoje en el .then()\r\n  // - reject:  una funcion q va a devolver los datos cuando quieres q la promesa se ejecute de forma\r\n  //          incorrecta, estos datos los recogeria el catch()\r\n\r\n  var _promiseResult = new Promise((resolve, reject) => {\r\n    var petAjax = new XMLHttpRequest();\r\n\r\n    petAjax.open(\"POST\", \"http://localhost:5000/api/Cliente/Registro\");\r\n    petAjax.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n    petAjax.addEventListener(\"readystatechange\", () => {\r\n      if (petAjax.readyState === 4) {\r\n        console.log(petAjax);\r\n\r\n        switch (petAjax.status) {\r\n          case 200:\r\n            //la respuesta del server esta en petAjax.responseText\r\n            var respuesta = JSON.parse(petAjax.responseText);\r\n            resolve(respuesta);\r\n            break;\r\n\r\n          default:\r\n            reject({\r\n              codigo: 1,\r\n              mensaje:\r\n                \"algo ha ido mal en pet.ajax al servicio de registrar cliente...\",\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    petAjax.send(\r\n      JSON.stringify({ nombre, apellidos, login, telefono, email, password })\r\n    );\r\n  });\r\n\r\n  return _promiseResult;\r\n}\r\n//#endregion\r\n\r\n//#region --- FUNCIONES DE LOGIN DE CLIENTE ---  //\r\nexport async function loginCliente(datoslogin) {\r\n  try{\r\n    var _petAjax = await fetch(\"http://localhost:5000/api/Cliente/Login\", \r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(datoslogin),\r\n    });\r\n    return await _petAjax.json();\r\n\r\n}catch(error){\r\n  console.log('error al hacer el login', error);\r\n}\r\n}\r\n//#endregion\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,SAASA,gBAAgBA,CAAC;EAC/BC,MAAM;EACNC,SAAS;EACTC,KAAK;EACLC,QAAQ;EACRC,KAAK;EACLC;AACF,CAAC,EAAE;EACD,IAAID,KAAK,KAAK,EAAE,EAAEA,KAAK,GAAGF,KAAK;;EAE/B;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAII,cAAc,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpD,IAAIC,OAAO,GAAG,IAAIC,cAAc,CAAC,CAAC;IAElCD,OAAO,CAACE,IAAI,CAAC,MAAM,EAAE,4CAA4C,CAAC;IAClEF,OAAO,CAACG,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAE5DH,OAAO,CAACI,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;MACjD,IAAIJ,OAAO,CAACK,UAAU,KAAK,CAAC,EAAE;QAC5BC,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;QAEpB,QAAQA,OAAO,CAACQ,MAAM;UACpB,KAAK,GAAG;YACN;YACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACX,OAAO,CAACY,YAAY,CAAC;YAChDd,OAAO,CAACW,SAAS,CAAC;YAClB;UAEF;YACEV,MAAM,CAAC;cACLc,MAAM,EAAE,CAAC;cACTC,OAAO,EACL;YACJ,CAAC,CAAC;YACF;QACJ;MACF;IACF,CAAC,CAAC;IAEFd,OAAO,CAACe,IAAI,CACVL,IAAI,CAACM,SAAS,CAAC;MAAE1B,MAAM;MAAEC,SAAS;MAAEG,KAAK;MAAEC,QAAQ;MAAEH,KAAK;MAAEC;IAAS,CAAC,CACxE,CAAC;EACH,CAAC,CAAC;EAEF,OAAOG,cAAc;AACvB;AACA;;AAEA;AACA,OAAO,eAAeqB,YAAYA,CAACC,UAAU,EAAE;EAC7C,IAAG;IACD,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EACpE;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEb,IAAI,CAACM,SAAS,CAACE,UAAU;IACjC,CAAC,CAAC;IACF,OAAO,MAAMC,QAAQ,CAACK,IAAI,CAAC,CAAC;EAEhC,CAAC,QAAMC,KAAK,EAAC;IACXnB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkB,KAAK,CAAC;EAC/C;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}