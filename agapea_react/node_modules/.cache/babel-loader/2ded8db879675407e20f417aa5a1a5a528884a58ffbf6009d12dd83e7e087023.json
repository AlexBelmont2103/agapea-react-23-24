{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thard\\\\OneDrive\\\\Documentos\\\\DAW\\\\Segundo\\\\entornoCliente\\\\agapea_react\\\\src\\\\contextProviders\\\\clienteLoggedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//modulo js para definir el state global con context-api del cliente logueado\n//usando un reducer, no el state\nimport { createContext, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clienteLoggedContext = /*#__PURE__*/createContext();\n//Funcion reducer\n//Requisitos: 2 parametros: \n//El state actual\n//La action que se manda debe ser un objeto json con propiedad type y payload con el valor que quieres cambiar\n// {type:\"nombreAccion\", payload: valor}\n//La funcion debe ser pura: no debe modificar el state original, debe devolver un nuevo state\nfunction clienteLoggedReducer(state, action) {\n  //en action.payload un objeto asi: {datoscliente:..., jwt:...}\n  switch (action.type) {\n    case \"CLIENTE_LOGIN\":\n      return action.payload;\n    case \"CLIENTE_LOGOUT\":\n      return null;\n    default:\n      return state;\n  }\n}\n\n//A EXPORTAR: componente con codigo jsx que defina el provider del contexto y pase valores del reducer\nfunction ClienteLoggedProvider({\n  children\n}) {\n  _s();\n  const [clienteLogged, dispatch] = useReducer(clienteLoggedReducer, null);\n  return /*#__PURE__*/_jsxDEV(clienteLoggedContext.Provider, {\n    value: {\n      clienteLogged,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n//A EXPORTAR: Hook personalizado para usar los valores del contexto creado\n_s(ClienteLoggedProvider, \"XJnWkJvyOiQwHcB3IUnTB4CHrWU=\");\n_c = ClienteLoggedProvider;\nfunction useClienteLoggedContext() {\n  _s2();\n  clienteLoggedContext = useContext(clienteLoggedContext);\n  return clienteLoggedContext;\n}\n_s2(useClienteLoggedContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { ClienteLoggedProvider, useClienteLoggedContext };\nvar _c;\n$RefreshReg$(_c, \"ClienteLoggedProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","jsxDEV","_jsxDEV","clienteLoggedContext","clienteLoggedReducer","state","action","type","payload","ClienteLoggedProvider","children","_s","clienteLogged","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClienteLoggedContext","_s2","$RefreshReg$"],"sources":["C:/Users/thard/OneDrive/Documentos/DAW/Segundo/entornoCliente/agapea_react/src/contextProviders/clienteLoggedContext.js"],"sourcesContent":["//modulo js para definir el state global con context-api del cliente logueado\r\n//usando un reducer, no el state\r\nimport { createContext, useContext, useReducer } from \"react\";\r\n\r\nconst clienteLoggedContext = createContext();\r\n//Funcion reducer\r\n//Requisitos: 2 parametros: \r\n//El state actual\r\n//La action que se manda debe ser un objeto json con propiedad type y payload con el valor que quieres cambiar\r\n// {type:\"nombreAccion\", payload: valor}\r\n//La funcion debe ser pura: no debe modificar el state original, debe devolver un nuevo state\r\nfunction clienteLoggedReducer(state, action) {\r\n    //en action.payload un objeto asi: {datoscliente:..., jwt:...}\r\n    switch (action.type) {\r\n        case \"CLIENTE_LOGIN\":\r\n        return action.payload;\r\n        case \"CLIENTE_LOGOUT\":\r\n        return null;\r\n        default:\r\n        return state;\r\n    }\r\n    }\r\n\r\n\r\n//A EXPORTAR: componente con codigo jsx que defina el provider del contexto y pase valores del reducer\r\nfunction ClienteLoggedProvider({ children }) {\r\n  const [clienteLogged, dispatch] = useReducer(clienteLoggedReducer, null);\r\n  return (\r\n    <clienteLoggedContext.Provider value={{ clienteLogged, dispatch }}>\r\n      {children}\r\n    </clienteLoggedContext.Provider>\r\n  );\r\n}\r\n\r\n//A EXPORTAR: Hook personalizado para usar los valores del contexto creado\r\nfunction useClienteLoggedContext() {\r\n  clienteLoggedContext= useContext(clienteLoggedContext);\r\n  return clienteLoggedContext;\r\n}\r\n\r\nexport { ClienteLoggedProvider, useClienteLoggedContext };\r\n"],"mappings":";;;AAAA;AACA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,oBAAoB,gBAAGL,aAAa,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,oBAAoBA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACzC;EACA,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,eAAe;MACpB,OAAOD,MAAM,CAACE,OAAO;IACrB,KAAK,gBAAgB;MACrB,OAAO,IAAI;IACX;MACA,OAAOH,KAAK;EAChB;AACA;;AAGJ;AACA,SAASI,qBAAqBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,aAAa,EAAEC,QAAQ,CAAC,GAAGb,UAAU,CAACI,oBAAoB,EAAE,IAAI,CAAC;EACxE,oBACEF,OAAA,CAACC,oBAAoB,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAEH,aAAa;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAC/DA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAEpC;;AAEA;AAAAR,EAAA,CATSF,qBAAqB;AAAAW,EAAA,GAArBX,qBAAqB;AAU9B,SAASY,uBAAuBA,CAAA,EAAG;EAAAC,GAAA;EACjCnB,oBAAoB,GAAEJ,UAAU,CAACI,oBAAoB,CAAC;EACtD,OAAOA,oBAAoB;AAC7B;AAACmB,GAAA,CAHQD,uBAAuB;AAKhC,SAASZ,qBAAqB,EAAEY,uBAAuB;AAAG,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}